

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('flights', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LoyaltyProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField()),
                ('terms_and_conditions', models.TextField()),
                ('points_expiry_months', models.PositiveSmallIntegerField(default=36)),
                ('min_points_redemption', models.PositiveIntegerField(default=1000)),
                ('points_currency_ratio', models.DecimalField(decimal_places=4, default=0.01, help_text='Value of 1 point in currency', max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Loyalty Program',
                'verbose_name_plural': 'Loyalty Programs',
            },
        ),
        migrations.CreateModel(
            name='LoyaltyTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10)),
                ('description', models.TextField()),
                ('min_points_earned', models.PositiveIntegerField(help_text='Minimum points to qualify for this tier')),
                ('min_flights_count', models.PositiveSmallIntegerField(default=0)),
                ('points_multiplier', models.DecimalField(decimal_places=2, default=1.0, max_digits=4)),
                ('baggage_allowance_bonus', models.PositiveSmallIntegerField(default=0, help_text='Additional baggage in kg')),
                ('priority_check_in', models.BooleanField(default=False)),
                ('priority_boarding', models.BooleanField(default=False)),
                ('lounge_access', models.BooleanField(default=False)),
                ('companion_tickets', models.PositiveSmallIntegerField(default=0)),
                ('seat_upgrade_vouchers', models.PositiveSmallIntegerField(default=0)),
                ('additional_benefits', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiers', to='passengers.loyaltyprogram')),
            ],
            options={
                'verbose_name': 'Loyalty Tier',
                'verbose_name_plural': 'Loyalty Tiers',
                'ordering': ['program', 'min_points_earned'],
                'unique_together': {('program', 'code')},
            },
        ),
        migrations.CreateModel(
            name='Passenger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passenger_id', models.CharField(max_length=20, unique=True)),
                ('title', models.CharField(blank=True, choices=[('mr', 'Mr'), ('mrs', 'Mrs'), ('ms', 'Ms'), ('miss', 'Miss'), ('dr', 'Dr'), ('prof', 'Prof')], max_length=10)),
                ('first_name', models.CharField(max_length=100)),
                ('middle_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other'), ('prefer_not_to_say', 'Prefer not to say')], max_length=20)),
                ('nationality', models.CharField(max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('passport_number', models.CharField(blank=True, max_length=50)),
                ('passport_issuing_country', models.CharField(blank=True, max_length=100)),
                ('passport_expiry', models.DateField(blank=True, null=True)),
                ('address_line1', models.CharField(blank=True, max_length=255)),
                ('address_line2', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state_province', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('special_assistance', models.TextField(blank=True, help_text='Any special assistance requirements')),
                ('dietary_requirements', models.TextField(blank=True, help_text='Any special dietary requirements')),
                ('is_blacklisted', models.BooleanField(default=False)),
                ('blacklist_reason', models.TextField(blank=True)),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='passenger_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Passenger',
                'verbose_name_plural': 'Passengers',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('membership_number', models.CharField(max_length=20, unique=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('expired', 'Expired')], default='active', max_length=20)),
                ('tier_qualification_date', models.DateField(blank=True, null=True)),
                ('tier_expiry_date', models.DateField(blank=True, null=True)),
                ('current_points', models.PositiveIntegerField(default=0)),
                ('lifetime_points', models.PositiveIntegerField(default=0)),
                ('pending_points', models.PositiveIntegerField(default=0)),
                ('join_date', models.DateField()),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('last_flight_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='passengers.loyaltyprogram')),
                ('current_tier', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='passengers.loyaltytier')),
                ('passenger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_memberships', to='passengers.passenger')),
            ],
            options={
                'verbose_name': 'Loyalty Membership',
                'verbose_name_plural': 'Loyalty Memberships',
                'unique_together': {('program', 'passenger')},
            },
        ),
        migrations.CreateModel(
            name='PassengerBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_reference', models.CharField(max_length=10, unique=True)),
                ('booking_date', models.DateTimeField(auto_now_add=True)),
                ('booking_status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('checked_in', 'Checked In'), ('boarded', 'Boarded'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='pending', max_length=20)),
                ('booking_type', models.CharField(choices=[('economy', 'Economy'), ('premium_economy', 'Premium Economy'), ('business', 'Business'), ('first', 'First Class')], default='economy', max_length=20)),
                ('booked_by_agent_code', models.CharField(blank=True, max_length=20)),
                ('seat_number', models.CharField(blank=True, max_length=10)),
                ('seat_preference', models.CharField(blank=True, help_text='E.g., window, aisle, extra legroom', max_length=50)),
                ('base_fare', models.DecimalField(decimal_places=2, max_digits=10)),
                ('taxes', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('fees', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('discount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_status', models.CharField(choices=[('unpaid', 'Unpaid'), ('partially_paid', 'Partially Paid'), ('paid', 'Paid'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded')], default='unpaid', max_length=20)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('boarding_time', models.DateTimeField(blank=True, null=True)),
                ('checked_baggage_weight', models.DecimalField(decimal_places=2, default=0, help_text='Weight in kg', max_digits=5)),
                ('checked_baggage_count', models.PositiveSmallIntegerField(default=0)),
                ('special_requests', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booked_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_bookings', to=settings.AUTH_USER_MODEL)),
                ('checked_in_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checked_in_bookings', to=settings.AUTH_USER_MODEL)),
                ('flight', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='passenger_bookings', to='flights.flight')),
                ('flight_sector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='passenger_bookings', to='flights.flightsector')),
                ('passenger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='passengers.passenger')),
            ],
            options={
                'verbose_name': 'Passenger Booking',
                'verbose_name_plural': 'Passenger Bookings',
                'ordering': ['-booking_date'],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('earn', 'Earn Points'), ('redeem', 'Redeem Points'), ('expire', 'Points Expired'), ('adjust', 'Points Adjustment'), ('transfer', 'Points Transfer'), ('bonus', 'Bonus Points')], max_length=20)),
                ('points', models.PositiveIntegerField()),
                ('remaining_points', models.PositiveIntegerField(blank=True, null=True)),
                ('transaction_date', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField()),
                ('is_expired', models.BooleanField(default=False)),
                ('reference_code', models.CharField(blank=True, max_length=50)),
                ('flight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loyalty_transactions', to='flights.flight')),
                ('membership', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='passengers.loyaltymembership')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_loyalty_transactions', to=settings.AUTH_USER_MODEL)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loyalty_transactions', to='passengers.passengerbooking')),
            ],
            options={
                'verbose_name': 'Loyalty Transaction',
                'verbose_name_plural': 'Loyalty Transactions',
                'ordering': ['-transaction_date'],
            },
        ),
    ]
